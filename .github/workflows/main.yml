name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up GCP credentials
      run: |
        echo '${{ secrets.GCP_CREDENTIALS }}' > gcp_credentials.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/gcp_credentials.json" >> $GITHUB_ENV
        echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
        echo "GCP_BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV

    - name: Start Flask application
      run: |
        python app.py > flask_output.log 2>&1 &
        echo $! > flask.pid
        sleep 20  # Attendre que l'application dÃ©marre

    - name: Check Flask application logs
      run: |
        echo "Flask application output:"
        cat flask_output.log
        echo "Flask application logs:"
        cat app.log

    - name: Check if Flask app is running
      run: |
        for i in {1..10}; do
          echo "Attempt $i to connect to Flask app"
          if curl -sSf http://localhost:5000 > /dev/null; then
            echo "Flask application is running"
            exit 0
          fi
          sleep 5
        done
        echo "Flask application failed to start"
        echo "Last few lines of Flask log:"
        tail -n 50 app.log
        exit 1

    - name: Run tests
      run: |
        pytest

    - name: Run linter
      run: |
        pylint **/*.py

    - name: Stop Flask application
      run: |
        kill $(cat flask.pid)
      if: always()

    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: flask-logs
        path: |
          flask_output.log
          app.log
