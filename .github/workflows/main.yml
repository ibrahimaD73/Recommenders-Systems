name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up GCP credentials
      run: |
        echo '${{ secrets.GCP_CREDENTIALS }}' > gcp_credentials.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/gcp_credentials.json" >> $GITHUB_ENV
        echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
        echo "GCP_BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV

    - name: Check Python environment
      run: |
        python --version
        pip list
        echo "Current working directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la

    - name: Start Flask application
      run: |
        echo "Starting Flask application..."
        python app.py > flask_output.log 2>&1 &
        echo $! > flask.pid
        echo "Waiting for Flask to start..."
        sleep 45  # Increased wait time

    - name: Check Flask application logs
      run: |
        echo "Flask application output:"
        cat flask_output.log
        echo "Flask application logs:"
        if [ -f app.log ]; then
          cat app.log
        else
          echo "app.log not found"
          echo "Contents of current directory:"
          ls -la
        fi

    - name: Check if Flask app is running
      run: |
        for i in {1..15}; do
          echo "Attempt $i to connect to Flask app"
          if curl -sSf http://localhost:5000 > /dev/null; then
            echo "Flask application is running"
            exit 0
          fi
          sleep 10
        done
        echo "Flask application failed to start"
        echo "Last few lines of Flask output:"
        tail -n 50 flask_output.log
        echo "Last few lines of app log (if exists):"
        if [ -f app.log ]; then
          tail -n 50 app.log
        else
          echo "app.log not found"
        fi
        exit 1

    - name: Run tests
      run: |
        pytest

    - name: Run linter
      run: |
        pylint **/*.py

    - name: Stop Flask application
      if: always()
      run: |
        if [ -f flask.pid ]; then
          kill $(cat flask.pid)
        else
          echo "Flask PID file not found"
        fi

    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: flask-logs
        path: |
          flask_output.log
          app.log
          *.log
        if-no-files-found: warn

    - name: Debug information
      if: failure()
      run: |
        echo "Debug information:"
        echo "Environment variables:"
        env
        echo "Disk space:"
        df -h
        echo "Memory usage:"
        free -m
        echo "Running processes:"
        ps aux
